!function(){function e(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);"Object"===o&&e.constructor&&(o=e.constructor.name);if("Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}function t(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function o(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function s(e,n,t){return n&&o(e.prototype,n),t&&o(e,t),e}(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{BN9v:function(n,o,i){"use strict";i.d(o,"a",function(){return m});var r=i("mrSG"),a=i("fXoL"),l=i("tyNb"),c=i("lJxs"),d=i("ZfaG"),h=i("2Vo4"),u=i("pLZG"),p=function(){function e(){t(this,e),this.activeState$=new h.a(void 0)}return s(e,[{key:"getState",get:function(){return this.activeState$.asObservable().pipe(Object(u.a)(function(e){return!!e}))}},{key:"setState",set:function(e){this.activeState$.next(e)}}]),e}();p.ctorParameters=function(){return[]},p=Object(r.a)([Object(a.F)({providedIn:"root"})],p);var m=function(){function e(n,o,s){t(this,e),this.activatedRoute=n,this.router=o,this.navbarSharedService=s,this.selected$=!1,this.title$="",this.expanded$=!1,this.collapsed=!1}return s(e,[{key:"ngOnInit",value:function(){var e=this;this.navbarStateSubscription=this.navbarSharedService.getState.pipe(Object(c.a)(function(n){e.item.id==n.item_id?(console.log("navbar_state",n),e.activeState=n,e.expand()):(e.activeState=n,e.collapse())})).subscribe(function(e){})}},{key:"toggle",value:function(){this.selected$||(this.expanded$=!this.expanded$)}},{key:"expand",value:function(){console.log("exapnd"),this.expanded$=!0}},{key:"collapse",value:function(){this.expanded$=!1}},{key:"onItemClick",value:function(e,n,t){this.navbarSharedService.setState={item_id:e.id,subitem_id:n.id},this.router.navigate(t)}}]),e}();m.ctorParameters=function(){return[{type:l.a},{type:l.f},{type:p}]},m.propDecorators={activeState:[{type:a.I,args:["activestate"]}],selected$:[{type:a.I,args:["selected"]}],title$:[{type:a.I,args:["title"]}],item:[{type:a.I,args:["item"]}],routerLink:[{type:a.I,args:["routerlink"]}],expanded$:[{type:a.I,args:["expanded"]}]},m=Object(r.a)([Object(a.n)({selector:"app-navbar-list-item",template:'<div class="container">\n\n\n  <div [class.active]="  activeState?.item_id  == item?.id  " class="list-item" fxLayout="column"\n    [class.expanded]=" expanded$ " (debounceClick)="toggle()" [debounceTime]="220" appDebounceClick>\n\n    <div class="item" nbButton fxFlex appearance="ghost" fxLayoutAlign="center center" size="small">\n\n\n      \x3c!-- <div class="itemicon">\n      <nb-icon [status]="  ( expanded$ ||  activeState?.item_id  == item?.id   )? \'basic\' : \'info\'" class="title"\n        [icon]="  ( expanded$ ||  activeState?.item_id  == item?.id   ) ? \'chevron-down-outline\' : \'chevron-right-outline\'"\n        icon="chevron-right-outline">\n\n      </nb-icon>\n    </div> --\x3e\n\n      <span class="title" fxFlex>\n        {{title$}}\n\n      </span>\n\n\n      <div class="  roundBtn" fxLayoutAlign="center center">\n        <nb-icon [class.active]="  activeState?.subitem_id  == item?.id  " icon="plus-outline">\n\n        </nb-icon>\n      </div>\n\n\n\n\n    </div>\n    \x3c!-- @slideInOut (@slideInOut.start)="onAnimationStart($event)" (@slideInOut.done)="onAnimationEnd($event)" --\x3e\n\n\n\n  </div>\n\n  <div [@collapse]=" ! ( expanded$ ||  activeState?.item_id  == item?.id   ) " class="subitemContainer collapsible"\n    fxLayout="column">\n\n\n    \x3c!-- [routerLink]="child.link" --\x3e\n\n    <div [class.selected]=" activeState?.subitem_id == child?.id  " *ngFor="let child of item.children" class="subitem"\n      fxFlex appearance="ghost" (click)="onItemClick(item , child ,  child.link )" size="small"\n      fxLayoutAlign="start center">\n      <div class="itemicon " fxLayoutAlign="start center">\n        <nb-icon class="subtitle" [class.active]="  activeState?.subitem_id  == child?.id  " [icon]="child?.icon">\n\n        </nb-icon>\n      </div>\n      <span class="subtitle" [class.selected]="  activeState?.subitem_id  == child?.id  ">\n        {{child?.name}}\n\n      </span>\n    </div>\n\n\n\n  </div>\n\n</div>\n',animations:e(d.a),styles:["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/*\n  Declare variables before making them global.\n  dart-sass doesn't allow to declare variable with !global.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/*\n  Declare variables before making them global.\n  dart-sass doesn't allow to declare variable with !global.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n:root {\n  --small-checkbox: 16px ;\n}\n.active .title {\n  color: var(--navitem-selected-text) !important;\n}\n.container .list-item {\n  border-radius: var(--navitem-radius);\n  color: var(--navitem-text);\n}\n.container .list-item:hover {\n  color: var(--navitem-hover-text);\n  font-weight: 900 !important;\n  background: linear-gradient(to right, #457fca, #5b86e5);\n  /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n}\n.container .list-item.expanded {\n  background: linear-gradient(to right, #457fca, #5b86e5);\n  /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n  color: var(--navitem-hover-text);\n}\n.container .list-item.active {\n  color: var(--navitem-hover-text);\n  background: linear-gradient(to right, #5b86e5, #36d1dc);\n}\n.container .list-item .item {\n  font-size: 1rem !important;\n  z-index: 6 !important;\n}\n.container .list-item .item .title {\n  padding: 1rem;\n  font-weight: 450;\n}\n.container .list-item .roundBtn {\n  border-radius: 50%;\n  width: 2.6rem;\n  height: 2.6rem;\n  margin-right: 1rem;\n}\n.container .list-item .roundBtn:hover {\n  background: rgba(255, 255, 255, 0.527);\n}\n.container .collapsible .subitem:hover {\n  border-radius: var(--navitem-radius) !important;\n}\n.container .collapsible .subitem:hover .subtitle {\n  color: var(--navitem-selected-text) !important;\n}\n.container .collapsible .subitem.active {\n  color: var(--navitem-selected-text) !important;\n  border-radius: var(--navitem-radius) !important;\n}\n.container .collapsible .subitem .subtitle {\n  color: var(--navitem-text) !important;\n  font-weight: 500;\n}\n.container .collapsible .subitem.selected {\n  border-radius: var(--navitem-radius) !important;\n  background-color: var(--navitem-selected-background);\n  color: var(--navitem-selected-text) !important;\n}\n.container .collapsible .subitem.selected .subtitle {\n  color: var(--navitem-selected-text) !important;\n  font-weight: 800 !important;\n}\n.subitem {\n  margin-top: 2px !important;\n  margin-bottom: 1px !important;\n  padding-top: 0.3rem;\n  padding-bottom: 0.3rem;\n  z-index: 4 !important;\n}\n.subitem:hover {\n  background-color: rgba(0, 0, 0, 0.3);\n}\n.subitemContainer {\n  padding-left: 0.6rem;\n  margin: 0.2rem;\n}\n.list-item {\n  margin-top: 8px !important;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  margin-left: 0.2rem;\n  margin-right: 0.2rem;\n}\nbutton {\n  text-transform: capitalize !important;\n}\n.itemicon {\n  margin-right: 1rem;\n  margin-left: 1rem;\n}\n.collapsible {\n  overflow: hidden;\n}"]})],m)},c0TW:function(e,n,o){"use strict";o.d(n,"b",function(){return i}),o.d(n,"c",function(){return l}),o.d(n,"a",function(){return c});var i,r=o("mrSG"),a=o("fXoL");!function(e){e.HOST="host",e.DOMAIN="domain",e.ANDROID="android",e.IOS="ios",e.WEB="web",e.REPOSITORY="repository",e.DOCKER="docker"}(i||(i={}));var l={Host:"host",HostCreate:"host_create",HostConfigure:"host_configure",Domain:"domain",DomainCreate:"domain_create",DomainConfigure:"domain_configure",Web:"web",WebCreate:"web_create",WebConfigure:"web_configure",Android:"android",AndroidCreate:"dandroidcreate",AndroidConfigure:"android_configure",Ios:"ios",IosCreate:"ios_create",IosConfigure:"ios_configure",Repository:"repository",RepositoryCreate:"repository_create",RepositoryConfigure:"repository_configure",Docker:"docker",DockerCreate:"docker_create",DockerConfigure:"docker_configure"},c=function(){function e(){t(this,e)}return s(e,[{key:"getAssetTypes",get:function(){return[{name:"Hosts",icon:"eva-arrow-left",type:i.HOST,link:["/asset","host","import"],id:l.Host,path:["/asset/host"],children:[{name:"Hosts",icon:"external-link-outline",link:["/asset","host","import"],id:l.Host},{name:"Create",icon:"plus-circle-outline",link:["/asset","host","add"],id:l.HostCreate},{name:"Configure",icon:"external-link-outline",link:["/asset","host","configure"],id:l.HostConfigure}]},{name:"Domains",type:i.DOMAIN,link:["/asset","domain","add"],path:["/asset/domain"],id:l.Domain,children:[{name:"Create",icon:"plus-circle-outline",link:["/asset","domain","add"],id:l.Domain},{name:"Import",icon:"external-link-outline",link:["/asset","domain","import"],id:l.DomainCreate},{name:"Configure",icon:"external-link-outline",link:["/asset","domain","configure"],id:l.DomainConfigure}]},{name:"Web",type:i.WEB,link:["/asset","web","add"],id:l.Web,path:["/asset/web"],children:[{name:"Create",icon:"plus-circle-outline",link:["/asset","web","add"],id:l.Web},{name:"Import",icon:"external-link-outline",link:["/asset","web","import"],id:l.WebCreate},{name:"Configure",icon:"external-link-outline",link:["/asset","web","configure"],id:l.WebConfigure}]},{name:"Android",type:i.ANDROID,link:["/asset","android","add"],path:["/asset/android"],id:l.Android,children:[{name:"Create",icon:"plus-circle-outline",link:["/asset","android","add"],id:l.Android},{name:"Import",icon:"external-link-outline",link:["/asset","android","import"],id:l.AndroidCreate},{name:"Configure",icon:"external-link-outline",link:["/asset","android","configure"],id:l.AndroidConfigure}]},{name:"iOS",type:i.IOS,link:["/asset","ios","add"],id:l.Ios,path:["/asset/ios"],children:[{name:"Create",icon:"plus-circle-outline",link:["/asset","ios","add"],id:l.Ios},{name:"Import",icon:"external-link-outline",link:["/asset","ios","import"],id:l.IosCreate},{name:"Configure",icon:"external-link-outline",link:["/asset","ios","configure"],id:l.IosConfigure}]},{name:"Repository",type:i.REPOSITORY,link:["/asset","repository","add"],path:["/asset/repository"],id:l.Repository,children:[{name:"Create",icon:"plus-circle-outline",link:["/asset","repository","add"],id:l.Repository},{name:"Import",icon:"external-link-outline",link:["/asset","repository","import"],id:l.RepositoryCreate},{name:"Configure",icon:"external-link-outline",link:["/asset","repository","configure"],id:l.RepositoryConfigure}]},{name:"Docker",type:i.DOCKER,link:["/asset","docker","add"],id:l.Docker,path:["/asset/docker"],children:[{name:"Create",icon:"plus-circle-outline",link:["/asset","docker","add"],id:l.Docker},{name:"Import",icon:"external-link-outline",link:["/asset","docker","import"],id:l.DockerCreate},{name:"Configure",icon:"external-link-outline",link:["/asset","docker","configure"],id:l.DockerConfigure}]}]}}]),e}();c.ctorParameters=function(){return[]},c=Object(r.a)([Object(a.F)({providedIn:"root"})],c)},y8eJ:function(e,n,o){"use strict";o.d(n,"a",function(){return m});var i=o("mrSG"),r=o("tk/3"),a=o("fXoL"),l=o("XNiG"),c=o("nYR2"),d=o("7qw2"),h=o("c0TW"),u=d.a+"api/v2/asset",p=d.a+"api/v2/",m=function(){function e(n){t(this,e),this.http=n}return s(e,[{key:"getHosts",value:function(){return this.http.get(u+"/host")}},{key:"addHost",value:function(e){return this.http.post(u+"/host",{value:e})}},{key:"getWeb",value:function(){return this.http.get(u+"/web")}},{key:"addWeb",value:function(e){return this.http.post(u+"/web",{value:e})}},{key:"getAsset",value:function(e){switch(console.log("getAsset",e),e){case h.b.REPOSITORY:return this.getRepository();case h.b.IOS:return this.getIosApps();case h.b.ANDROID:return this.getAndroidApps();case h.b.WEB:return this.getWeb();case h.b.DOCKER:return this.getDocker();case h.b.DOMAIN:return this.getDomains();case h.b.HOST:return this.getHosts();default:return this.getRepository()}}},{key:"getRepository",value:function(){return this.http.get(u+"/repository")}},{key:"addRepository",value:function(e){return this.http.post(u+"/repository",e)}},{key:"addRepositoryCredential",value:function(e){return this.http.post(u+"/repository/credential",e)}},{key:"getRepositoryCredential",value:function(){return this.http.get(u+"/repository/credential")}},{key:"getDocker",value:function(){return this.http.get(u+"/docker")}},{key:"addDocker",value:function(e){return this.http.post(u+"/docker",e)}},{key:"getDomains",value:function(){return this.http.get(u+"/domain")}},{key:"addDomain",value:function(e){return this.http.post(u+"/domain",{value:e})}},{key:"addAndroid",value:function(e,n,t){return this.http.post(u+"/android",{package_name:n,app_name:e,value:t})}},{key:"getAndroidApps",value:function(){return this.http.get(u+"/android")}},{key:"removeAndroidApps",value:function(){return this.http.get(u+"/android")}},{key:"addIosApp",value:function(e,n,t){return this.http.post(u+"/ios",{package_name:n,app_name:e,value:t})}},{key:"getIosApps",value:function(){return this.http.get(u+"/ios")}},{key:"createFile",value:function(e){return this.http.post(p+"file/create",{filename:e})}},{key:"upload",value:function(e,n){var t=new FormData;t.append("file",e,e.name);var o=new r.e,s=this.http.post(p+"file/upload?token="+n,t,{reportProgress:!0,observe:"events",headers:o}),i=new l.a;return s.pipe(Object(c.a)(function(){return console.log("complete...")})).subscribe(function(e){if(e.type===r.d.UploadProgress){var n=Math.round(100*e.loaded/e.total);i.next({status:!1,progress:n})}else e instanceof r.f&&(i.next({status:!0,progress:100,fileData:e.body}),i.complete())}),i.asObservable()}}]),e}();m.ctorParameters=function(){return[{type:r.b}]},m=Object(i.a)([Object(a.F)({providedIn:"root"})],m)}}])}();